parameters:
    btn_node.repository.node.class: Btn\NodeBundle\Repository\NodeRepository
    btn_node.content_providers.class: Btn\NodeBundle\Provider\NodeContentProviders
    btn_node.event_listener.request_subscriber.class: Btn\NodeBundle\EventListener\RequestSubscriber
    btn_node.event_listener.node_subscriber.class: Btn\NodeBundle\EventListener\NodeSubscriber
    btn_node.provider.route_node_content.class: Btn\NodeBundle\Provider\RouteNodeContentProvider
    btn_node.routing.router.class: Btn\NodeBundle\Routing\Router
services:
    # entity repository
    btn_node.repository.node:
        class: %btn_node.repository.node.class%
        arguments: [%btn_node.node.class%]
        factory: [@doctrine.orm.entity_manager, getRepository]
        calls:
            - [ setCacheLifetime, [%btn_node.node.cache_lifetime%]]

    # entity provider
    btn_node.provider.node:
        class: %btn_base.provider.entity.class%
        parent: btn_base.provider.abstract_entity
        arguments:
            - %btn_node.node.class%
            - @doctrine.orm.entity_manager
            - @btn_node.repository.node

    # entity as nested tree behavior
    gedmo.listener.tree:
        class: Gedmo\Tree\TreeListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [@annotation_reader]]

    # custom routing handler - 'catch all'
    btn_node.routing.router:
        class: %btn_node.routing.router.class%
        arguments: [@service_container]
        tags:
            - { name: router, priority: %btn_node.router_priority% }

    # alias for btn_node.routing.router
    btn_node.router: @btn_node.routing.router

    # request listener - helper
    btn_node.event_listener.request_subscriber:
        class: %btn_node.event_listener.request_subscriber.class%
        tags:
            - { name: kernel.event_subscriber }

    # node subscriber
    btn_node.event_listener.node_subscriber:
        class: %btn_node.event_listener.node_subscriber.class%
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        arguments:
            nodeClass: %btn_node.node.class%
            eventDispatcher: @event_dispatcher

    # gather all content providers (services tagged as 'btn_node.content_provider')
    btn_node.content_providers:
        class: %btn_node.content_providers.class%

    # internal routes content provider - user can assign content to nodes as specific route name
    btn_node.provider.route_node_content:
        class: %btn_node.provider.route_node_content.class%
        arguments:
            availableRoutes: %btn_node.available_routes%
        tags:
            - { name: btn_node.content_provider }
